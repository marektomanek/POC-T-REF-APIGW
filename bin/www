/* eslint-disable prefer-const */
/* eslint-disable init-declarations */
/* eslint-disable no-process-exit */
/* eslint-disable no-ternary */

/* eslint-disable require-jsdoc */

const app = require('../app');
const debug = require('debug')('fc-gateway-v4:server');
const http = require('http');
let port, server

/**
 * normalize a port into a number, string, or false.
 */

function normalizePort (val) {
    port = parseInt(val, 10);

    if (isNaN(port)) {
    // named pipe
        return val;
    }

    if (port >= 0) {
    // port number
        return port;
    }

    return false;
}

/**
 * event listener for HTTP server "error" event.
 */

function onError (error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
    case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * event listener for HTTP server "listening" event.
 */

function onListening () {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

/**
 * get port from environment and store in Express.
 */

port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * create HTTP server.
 */

server = http.createServer(app);

/**
 * listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


